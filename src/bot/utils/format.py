from aiogram import Bot, html
from aiogram.utils.deep_linking import create_start_link
from aiogram.utils.link import create_tg_link as _create_tg_link

from core.models import (
    InviteLinkExtended,
    LocationExtended,
    TravelExtended,
    UserExtended,
)

NO_DATA = "-"


def create_tg_link(text: str, link: str, **kwargs) -> str:
    return html.link(text, _create_tg_link(link, **kwargs))


def format_travel(travel: TravelExtended) -> str:
    return f"""
{html.bold("–ù–∞–∑–≤–∞–Ω–∏–µ")}: {travel.title}
{html.bold("–û–ø–∏—Å–∞–Ω–∏–µ")}:\n{travel.description}
""".strip()


def format_location(location: LocationExtended) -> str:
    return f"""
–õ–æ–∫–∞—Ü–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è "{location.travel.title}"
{html.bold("–ù–∞–∑–≤–∞–Ω–∏–µ:")}  {location.title}
{html.bold("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")} {location.country.title}, {location.city.title}, {location.address}
{html.bold("–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è:")} {location.start_at}
""".strip()


def format_member(user: UserExtended) -> str:
    return (
        f"–£—á–∞—Å—Ç–Ω–∏–∫ {f'@{user.tg_username}' if user.tg_username else create_tg_link(user.name, 'user', id=user.id)}\n"
        + format_user(user)
    )


async def format_invite_link(link: InviteLinkExtended, bot: Bot) -> str:
    return f"""
üé´ –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è —Å–æ –º–Ω–æ–π –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ ¬´{link.travel.title}¬ª.
üëá –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —ç—Ç–æ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ
{await create_start_link(bot, str(link.id), encode=True)}
""".strip()


def format_user(user: UserExtended) -> str:
    return f"""
{html.bold("–ò–º—è")}: {user.name}
{html.bold("–í–æ–∑—Ä–∞—Å—Ç")}: {user.age}
{html.bold("–°—Ç—Ä–∞–Ω–∞")}: {user.country.title}
{html.bold("–ì–æ—Ä–æ–¥")}: {user.city.title}
{html.bold("–û–ø–∏—Å–∞–Ω–∏–µ")}:\n{user.description or NO_DATA}
""".strip()
