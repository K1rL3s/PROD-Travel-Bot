"""geo

Revision ID: 0005
Revises: 0004
Create Date: 2024-03-21 18:25:31.693908

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0005"
down_revision: Union[str, None] = "0004"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "countries",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("alpha2", sa.String(length=2), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_countries")),
        sa.UniqueConstraint("id", name=op.f("uq_countries_id")),
    )
    op.create_table(
        "cities",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("country_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.Column("latitude", sa.Float(), nullable=False),
        sa.Column("longitude", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["countries.id"],
            name=op.f("fk_cities_country_id_countries"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_cities")),
        sa.UniqueConstraint("id", name=op.f("uq_cities_id")),
    )
    op.add_column("locations", sa.Column("country_id", sa.Integer(), nullable=False))
    op.add_column("locations", sa.Column("city_id", sa.Integer(), nullable=False))
    op.alter_column(
        "locations",
        "address",
        existing_type=sa.VARCHAR(length=256),
        type_=sa.String(length=512),
        existing_nullable=False,
    )
    op.create_foreign_key(
        op.f("fk_locations_city_id_cities"), "locations", "cities", ["city_id"], ["id"]
    )
    op.create_foreign_key(
        op.f("fk_locations_country_id_countries"),
        "locations",
        "countries",
        ["country_id"],
        ["id"],
    )
    op.drop_column("locations", "city")
    op.drop_column("locations", "country")
    op.add_column("users", sa.Column("country_id", sa.Integer(), nullable=False))
    op.add_column("users", sa.Column("city_id", sa.Integer(), nullable=False))
    op.create_foreign_key(
        op.f("fk_users_country_id_countries"),
        "users",
        "countries",
        ["country_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("fk_users_city_id_cities"), "users", "cities", ["city_id"], ["id"]
    )
    op.drop_column("users", "city")
    op.drop_column("users", "country")

    op.create_unique_constraint(op.f("uq_cities_id"), "cities", ["id"])
    op.create_unique_constraint(op.f("uq_countries_id"), "countries", ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "country", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "users",
        sa.Column("city", sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    )
    op.drop_constraint(op.f("fk_users_city_id_cities"), "users", type_="foreignkey")
    op.drop_constraint(
        op.f("fk_users_country_id_countries"), "users", type_="foreignkey"
    )
    op.drop_column("users", "city_id")
    op.drop_column("users", "country_id")
    op.add_column(
        "locations",
        sa.Column(
            "country", sa.VARCHAR(length=256), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "locations",
        sa.Column("city", sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    )
    op.drop_constraint(
        op.f("fk_locations_country_id_countries"), "locations", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("fk_locations_city_id_cities"), "locations", type_="foreignkey"
    )
    op.alter_column(
        "locations",
        "address",
        existing_type=sa.String(length=512),
        type_=sa.VARCHAR(length=256),
        existing_nullable=False,
    )
    op.drop_column("locations", "city_id")
    op.drop_column("locations", "country_id")
    op.drop_table("cities")
    op.drop_table("countries")
    # ### end Alembic commands ###
